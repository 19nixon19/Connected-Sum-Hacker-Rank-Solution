{
    ofstream fout(getenv("OUTPUT_PATH"));

    string graph_nodes_edges_temp;
    getline(cin, graph_nodes_edges_temp);

    vector<string> graph_nodes_edges = split(rtrim(graph_nodes_edges_temp));

    int graph_nodes = stoi(graph_nodes_edges[0]);
    int graph_edges = stoi(graph_nodes_edges[1]);

    vector<int> graph_from(graph_edges);
    vector<int> graph_to(graph_edges);

    for (int i = 0; i < graph_edges; i++) {
        string graph_from_to_temp;
        getline(cin, graph_from_to_temp);

        vector<string> graph_from_to = split(rtrim(graph_from_to_temp));

        int graph_from_temp = stoi(graph_from_to[0]);
        int graph_to_temp = stoi(graph_from_to[1]);

        graph_from[i] = graph_from_temp;
        graph_to[i] = graph_to_temp;
    }

    int result = connectedSum(graph_nodes, graph_from, graph_to);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
